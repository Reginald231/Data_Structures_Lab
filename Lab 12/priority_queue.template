#include <vector>
#include <algorithm>
#include <cstdlib>
#include <iostream>


using namespace std;

template <typename T>
priority_queue<T>::priority_queue() {
    //static int priorityIndex = 0;//keep track of the highest priority item...
}

template <typename T>
void priority_queue<T>::pop() {//Remove the highest priority child, then update the max index.

        h.remove();
        return;
}

template <typename T>
void priority_queue<T>::push(const T &item) {
    h.insert(item);
}

template <typename T>
bool priority_queue<T>::empty() const {
    return (h.is_empty());
}

template <typename T>
size_t priority_queue<T>::size() const {
    return h.size();
}

template <typename T>
T priority_queue<T>::top() const {
    return h.max();
}

template <typename T>
size_t priority_queue<T>::max() const {//Parse the vector and return the maximum child.

    size_t maxIndex = 0;

    for(size_t i = 0; i < h.size() - 1; i++){
        if (h[i] > maxIndex)
            maxIndex = i;
    }
    return h[maxIndex];

}

template <typename T>
size_t priority_queue<T>::getMaxIndex() const {
    size_t maxIndex = 0;

    for(size_t i = 0; i < h.size() - 1; i++){
        if (h[i] > maxIndex)
            maxIndex = i;
    }
    return maxIndex;
}