//
// Created by Reginald Long on 2019-03-20.
//

// FILE: bintree.template
// IMPLEMENTS: The binary_tree node class (see bintree.h for documentation).
#include <cassert>    // Provides assert
#include <cstdlib>   // Provides NULL, std::size_t
#include <iomanip>    // Provides std::setw
#include <iostream>   // Provides std::cout
#include "bintree.h"
#include <string>
#include <queue>
#include <cmath>


using namespace std;

namespace main_savitch_10
{
    template <class Process, class BTNode>
    void inorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            inorder(f, node_ptr->left( ));
            f( node_ptr->data( ) );
            inorder(f, node_ptr->right( ));
        }
    }

    template <class Process, class BTNode>
    void postorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            postorder(f, node_ptr->left( ));
            postorder(f, node_ptr->right( ));
            f(node_ptr->data( ));
        }
    }

    template <class Process, class BTNode>
    void preorder(Process f, BTNode* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr != NULL)
        {
            f( node_ptr->data( ) );
            preorder(f, node_ptr->left( ));
            preorder(f, node_ptr->right( ));
        }
    }

    template <class Item, class SizeType>
    void print(binary_tree_node<Item>* node_ptr, SizeType depth)
    // Library facilities used: iomanip, iostream, stdlib
    {
        if (node_ptr != NULL)
        {
            print(node_ptr->right( ), depth+1);
            std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
            std::cout << node_ptr->data( ) << std::endl;
            print(node_ptr->left( ),  depth+1);
        }
    }

    template <class Item>
    void tree_clear(binary_tree_node<Item>*& root_ptr)
    // Library facilities used: cstdlib
    {
        binary_tree_node<Item>* child;
        if (root_ptr != NULL)
        {
            child = root_ptr->left( );
            tree_clear( child );
            child = root_ptr->right( );
            tree_clear( child );
            delete root_ptr;
            root_ptr = NULL;
        }
    }

    template <class Item>
    binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr)
    // Library facilities used: cstdlib
    {
        binary_tree_node<Item> *l_ptr;
        binary_tree_node<Item> *r_ptr;

        if (root_ptr == NULL)
            return NULL;
        else
        {
            l_ptr = tree_copy( root_ptr->left( ) );
            r_ptr = tree_copy( root_ptr->right( ) );
            return
                    new binary_tree_node<Item>( root_ptr->data( ), l_ptr, r_ptr);
        }
    }

    template <class Item>
    size_t tree_size(const binary_tree_node<Item>* node_ptr)
    // Library facilities used: cstdlib
    {
        if (node_ptr == NULL)
            return 0;
        else
            return
                    1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
    }

    template <typename T>
    void printTree(queue<char> sequence){
        int level = 0;
        int items = pow(2,level);

        for(int level = 0; !sequence.empty(); level++){

            for(int i = 0; i < pow(2,level); i++) {

                if ((sequence.front()) == 'N')
                    cout << "null ";

                else
                    cout << sequence.front() <<  " ";


                sequence.pop();//remove the front anyway.

            }
            cout << endl;
        }
    }

    template <typename Item>
    void display_complete_tree(const binary_tree_node<Item> *t){
//            int tree level = 0;
//            int levelItem;


        std::queue<Item>sequenceQueue;

        std::queue<const binary_tree_node<Item>*> treeQueue;

        while(!treeQueue.empty()) {

            treeQueue.push(t);

            treeQueue.push(t->left());

            treeQueue.push(t->right());

            sequenceQueue.push(t->data());

            treeQueue.pop();

            display_complete_tree(treeQueue.front());
        }


        printTree<Item>(sequenceQueue);
    }
}
