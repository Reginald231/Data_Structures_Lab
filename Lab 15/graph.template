//
//  graph.cpp
//  Lab15
//
//  Created by Reginald Long on 4/22/19.
//  Copyright Â© 2019 Reginald Long. All rights reserved.
//

#include <stdio.h>
#include "graph.h"

using namespace std;
using namespace main_savitch_15;


template <class Item>
const std::size_t graph<Item>::MAXIMUM;

template <class Item>
void graph<Item>::add_vertex(const Item& label)
// Library facilities used: cassert, cstdlib
{

    
    assert(size( ) < MAXIMUM);

//    new_vertex_number = many_vertices;
  //  many_vertices++;
//    for (other_number = 0; other_number < many_vertices; ++other_number)
//    {
//        edges[other_number][new_vertex_number] = false;
//        edges[new_vertex_number][other_number] = false;
//    }

    labels.insert(label);

    //labels[new_vertex_number] = label;
}

template <class Item>
void graph<Item>::add_edge(std::size_t source, std::size_t target)
// Library facilities used: cassert, cstdlib
{
    assert(source < size( ));
    assert(target < size( ));

    edges[source].insert(target);
    edges[target].insert(source);
}

template <class Item>
void graph<Item>::remove_edge(std::size_t source, std::size_t target)
// Library facilities used: cassert, cstdlib
{
    assert(source < size( ));
   assert(target < size( ));
    edges[source].erase(target);
    edges[target].erase(source);
}

template <class Item>
size_t graph<Item>::get_index (const graph<string>& g, const string& target)
{
    size_t i = 0;
    while (i < g.size() && g[i] != target)
        ++i;
    assert (i < g.size());
    return i;
}

template <class Item>
Item graph<Item>::operator[ ] (std::size_t vertex) const
// Library facilities used: cassert, cstdlib
{
    assert(vertex < size( ));
    return labels[vertex];     // Returns only a copy of the label
}

template <class Item>
Item& graph<Item>::operator [ ] (std::size_t vertex){
    return labels[vertex];
}

template <class Item>
bool graph<Item>::is_edge(std::size_t source, std::size_t target) const
// Library facilities used: cassert, cstdlib
{
    assert(source < size( ));
    assert(target < size( ));
    return edges[source][target];
}

template <class Item>
std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const{
    return edges[vertex];
}

template <class Item>
std::size_t graph<Item>::size( ) const{
    return labels.size();
}






